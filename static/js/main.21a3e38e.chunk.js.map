{"version":3,"sources":["components/Habit.js","containers/Habits.js","components/FormModal.js","components/DeleteModal.js","containers/HabitsContainer.js","containers/Header.js","containers/Sidebar.js","App.js","customTheme.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Habit","habit","onCheckHabit","openEditModal","openDeleteModal","habitCompleted","numTimesChecked","frequency","Box","style","transition","checked","opacity","direction","justify","CheckBox","disabled","label","onChange","e","target","Text","alignSelf","margin","left","right","weight","align","Button","icon","Edit","onClick","Trash","color","Habits","habits","setHabits","openCreateModal","map","Math","min","overflow","border","size","side","Add","length","top","i","frequencyOptions","Form","title","closeModal","confirmAction","undefined","useState","name","setName","setFrequency","Layer","responsive","onEsc","onClickOutside","pad","TextInput","placeholder","value","bottom","Select","options","option","DeleteModal","HabitsContainer","idToChange","setIdToChange","showDeleteModal","setShowDeleteModal","showEditModal","setShowEditModal","showCreateModal","setShowCreateModal","closeDeleteModal","closeEditModal","closeCreateModal","id","filter","FormModal","newLabel","newFrequency","find","newHabitLabel","newHabit","confirm","uuidv4","AppBar","props","tag","background","vertical","elevation","zIndex","Header","setShowSidebar","showSidebar","darkMode","setDarkMode","Heading","level","Sun","Moon","Menu","Sidebar","ResponsiveContext","Consumer","FormClose","fill","Collapsible","open","flex","width","theme","deepMerge","grommet","global","colors","light","dark","font","family","height","HABITS_STORAGE_KEY","TIME_STORAGE_KEY","MOMENT_FORMAT","App","window","addEventListener","ev","preventDefault","localStorage","setItem","moment","format","useEffect","getItem","JSON","parse","timeLastVisited","diff","console","log","setTimeout","day","stringify","Grommet","full","themeMode","horizontal","app","body","Boolean","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.21a3e38e.chunk.js","sourcesContent":["import { Box, Button, CheckBox, Text } from 'grommet';\nimport { Edit, Trash } from 'grommet-icons';\n\nfunction Habit({ habit, onCheckHabit, openEditModal, openDeleteModal }) {\n  const habitCompleted = habit.numTimesChecked === habit.frequency;\n  return (\n    <Box\n      style={{\n        transition: 'opacity 0.3s',\n        ...((habitCompleted || habit.checked) && {\n          opacity: 0.3,\n        }),\n      }}\n      direction=\"row\"\n      justify=\"between\"\n    >\n      <CheckBox\n        disabled={habitCompleted}\n        checked={habit.checked}\n        label={habit.label}\n        onChange={(e) => onCheckHabit(e.target.checked, habit.label)}\n      />\n      <Text\n        alignSelf=\"center\"\n        margin={{ left: 'small', right: 'small' }}\n        weight=\"bold\"\n      >{`${habit.numTimesChecked}/${habit.frequency}`}</Text>\n      <Box direction=\"row\" align=\"end\" justify=\"end\">\n        <Button icon={<Edit />} onClick={() => openEditModal(habit)} />\n        <Button\n          icon={<Trash color=\"trash-color\" />}\n          onClick={() => openDeleteModal(habit)}\n        />\n      </Box>\n    </Box>\n  );\n}\n\nexport default Habit;\n","import { Box, Button, Text } from 'grommet';\nimport { Add } from 'grommet-icons';\n\nimport Habit from '../components/Habit';\n\nfunction Habits({\n  habits,\n  setHabits,\n  openCreateModal,\n  openEditModal,\n  openDeleteModal,\n}) {\n  const onCheckHabit = (checked, label) => {\n    setHabits(\n      habits.map((habit) =>\n        habit.label === label\n          ? {\n              ...habit,\n              checked,\n              numTimesChecked: checked\n                ? Math.min(habit.numTimesChecked + 1, habit.frequency)\n                : habit.numTimesChecked - 1,\n            }\n          : habit\n      )\n    );\n  };\n\n  return (\n    <Box direction=\"column\" overflow=\"hidden\">\n      <Box\n        margin=\"small\"\n        border={{ color: 'border-color', size: 'small', side: 'bottom' }}\n      >\n        <Button alignSelf=\"center\" onClick={openCreateModal}>\n          <Box direction=\"row\" align=\"center\" justify=\"center\">\n            <Add color=\"add-color\" />\n            <Text margin=\"small\">Add New Habit</Text>\n          </Box>\n        </Button>\n      </Box>\n      {habits.length === 0 ? (\n        <Text alignSelf=\"center\" margin={{ top: 'large' }}>\n          No habits to show...\n        </Text>\n      ) : (\n        habits.map((habit, i) => (\n          <Habit\n            key={`${habit.label} ${i}`}\n            habit={habit}\n            onCheckHabit={onCheckHabit}\n            openEditModal={openEditModal}\n            openDeleteModal={openDeleteModal}\n          />\n        ))\n      )}\n    </Box>\n  );\n}\n\nexport default Habits;\n","import { useState } from 'react';\nimport { Box, Button, Select, Layer, Text, TextInput } from 'grommet';\n\nconst frequencyOptions = [1, 2, 3, 4, 5, 6, 7];\n\nfunction Form({ title, closeModal, confirmAction, habit = undefined }) {\n  const [name, setName] = useState(habit ? habit.label : '');\n  const [frequency, setFrequency] = useState(habit ? habit.frequency : 7);\n\n  return (\n    <Layer responsive={false} onEsc={closeModal} onClickOutside={closeModal}>\n      <Box pad=\"medium\">\n        <Box direction=\"column\" pad=\"medium\">\n          <Text alignSelf=\"center\" margin=\"small\">\n            {title}\n          </Text>\n          <TextInput\n            placeholder={'Habit Name...'}\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n            size=\"medium\"\n          />\n          <Box direction=\"row\" margin={{ top: 'small', bottom: 'small' }}>\n            <Text alignSelf=\"center\" margin={{ right: 'small' }}>\n              Times per week:\n            </Text>\n            <Select\n              options={frequencyOptions}\n              value={frequency}\n              onChange={({ option }) => setFrequency(option)}\n            />\n          </Box>\n        </Box>\n        <Box direction=\"row\" margin={{ top: 'medium' }} justify=\"between\">\n          <Button\n            label=\"Cancel\"\n            margin={{ right: 'small' }}\n            color=\"black\"\n            onClick={closeModal}\n          />\n          <Button\n            label=\"Confirm\"\n            margin={{ left: 'small' }}\n            color=\"blue\"\n            onClick={() => confirmAction(name, frequency)}\n          />\n        </Box>\n      </Box>\n    </Layer>\n  );\n}\n\nexport default Form;\n","import { Box, Button, Layer, Text } from 'grommet';\n\nfunction DeleteModal({ closeModal, confirmAction }) {\n  return (\n    <Layer responsive={false} onEsc={closeModal} onClickOutside={closeModal}>\n      <Box pad=\"medium\">\n        <Box direction=\"column\" pad=\"medium\">\n          <Text alignSelf=\"center\" margin=\"small\">\n            Remove item?\n          </Text>\n        </Box>\n        <Box direction=\"row\" margin={{ top: 'medium' }} justify=\"between\">\n          <Button\n            label=\"Cancel\"\n            margin={{ right: 'small' }}\n            color=\"black\"\n            onClick={closeModal}\n          />\n          <Button\n            label=\"Delete\"\n            margin={{ left: 'small' }}\n            color=\"red\"\n            onClick={confirmAction}\n          />\n        </Box>\n      </Box>\n    </Layer>\n  );\n}\n\nexport default DeleteModal;\n","import { useState } from 'react';\nimport { Box } from 'grommet';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport Habits from './Habits';\nimport FormModal from '../components/FormModal';\nimport DeleteModal from '../components/DeleteModal';\n\nfunction HabitsContainer({ habits, setHabits }) {\n  const [idToChange, setIdToChange] = useState('');\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n\n  const openDeleteModal = (habit) => {\n    setIdToChange(habit.id);\n    setShowDeleteModal(true);\n  };\n\n  const closeDeleteModal = () => {\n    setIdToChange('');\n    setShowDeleteModal(false);\n  };\n\n  const removeHabit = () => {\n    setHabits(habits.filter((habit) => habit.id !== idToChange));\n    closeDeleteModal();\n  };\n\n  const openEditModal = (habit) => {\n    setIdToChange(habit.id);\n    setShowEditModal(true);\n  };\n\n  const closeEditModal = () => {\n    setIdToChange('');\n    setShowEditModal(false);\n  };\n\n  const editHabit = (newLabel, newFrequency) => {\n    setHabits(\n      habits.map((habit) =>\n        habit.id === idToChange\n          ? { ...habit, label: newLabel, frequency: newFrequency }\n          : habit\n      )\n    );\n    closeEditModal();\n  };\n\n  const openCreateModal = () => {\n    setShowCreateModal(true);\n  };\n\n  const closeCreateModal = () => {\n    setShowCreateModal(false);\n  };\n\n  const createHabit = (newHabitLabel, newFrequency) => {\n    const newHabit = {\n      label: newHabitLabel,\n      frequency: newFrequency,\n      checked: false,\n      confirm: false,\n      numTimesChecked: 0,\n      id: uuidv4(),\n    };\n\n    setHabits([...habits, newHabit]);\n    closeCreateModal();\n  };\n\n  return (\n    <Box>\n      <Habits\n        habits={habits}\n        setHabits={setHabits}\n        openCreateModal={openCreateModal}\n        openEditModal={openEditModal}\n        openDeleteModal={openDeleteModal}\n      />\n      {showDeleteModal && (\n        <DeleteModal\n          closeModal={closeDeleteModal}\n          confirmAction={removeHabit}\n        />\n      )}\n      {showEditModal && (\n        <FormModal\n          title=\"Edit Habit\"\n          closeModal={closeEditModal}\n          confirmAction={editHabit}\n          habit={habits.find((habit) => habit.id === idToChange)}\n        />\n      )}\n      {showCreateModal && (\n        <FormModal\n          title=\"Create Habit\"\n          closeModal={closeCreateModal}\n          confirmAction={createHabit}\n        />\n      )}\n    </Box>\n  );\n}\n\nexport default HabitsContainer;\n","import { Box, Button, Heading } from 'grommet';\nimport { Menu, Moon, Sun } from 'grommet-icons';\n\nfunction AppBar(props) {\n  return (\n    <Box\n      tag=\"header\"\n      direction=\"row\"\n      align=\"center\"\n      justify=\"between\"\n      background=\"header-bg\"\n      pad={{ left: 'medium', right: 'small', vertical: 'small' }}\n      elevation=\"medium\"\n      style={{ zIndex: '1' }}\n      {...props}\n    />\n  );\n}\n\nfunction Header({ setShowSidebar, showSidebar, darkMode, setDarkMode }) {\n  return (\n    <AppBar>\n      <Heading level=\"3\" margin=\"none\">\n        Habbit Rabbit\n      </Heading>\n      <Box direction=\"row\">\n        <Button\n          icon={darkMode ? <Sun /> : <Moon />}\n          alignSelf=\"center\"\n          margin={{ right: 'small' }}\n          onClick={() => {\n            setDarkMode(!darkMode);\n          }}\n        />\n        <Button icon={<Menu />} onClick={() => setShowSidebar(!showSidebar)} />\n      </Box>\n    </AppBar>\n  );\n}\n\nexport default Header;\n","import { Fragment } from 'react';\nimport { Box, Button, Collapsible, Layer, ResponsiveContext } from 'grommet';\nimport { FormClose } from 'grommet-icons';\n\nfunction Sidebar({ showSidebar, setShowSidebar }) {\n  return (\n    <ResponsiveContext.Consumer>\n      {(size) => (\n        <Fragment>\n          {!showSidebar || size !== 'small' ? (\n            <Collapsible direction=\"horizontal\" open={showSidebar}>\n              <Box\n                flex\n                width=\"medium\"\n                background=\"light-2\"\n                elevation=\"small\"\n                align=\"center\"\n                justify=\"center\"\n              >\n                Sidebar\n              </Box>\n            </Collapsible>\n          ) : (\n            <Layer>\n              <Box\n                background=\"light-2\"\n                tag=\"header\"\n                align=\"center\"\n                justify=\"end\"\n                direction=\"row\"\n              >\n                <Button\n                  icon={<FormClose />}\n                  onClick={() => setShowSidebar(false)}\n                />\n                <Box fill background=\"light-2\" align=\"center\" justify=\"center\">\n                  Sidebar\n                </Box>\n              </Box>\n            </Layer>\n          )}\n        </Fragment>\n      )}\n    </ResponsiveContext.Consumer>\n  );\n}\n\nexport default Sidebar;\n","import { useEffect, useState } from 'react';\nimport { Box, grommet, Grommet } from 'grommet';\nimport { deepMerge } from 'grommet/utils';\nimport moment from 'moment';\n\nimport { customTheme } from './customTheme';\nimport HabitsContainer from './containers/HabitsContainer';\nimport Header from './containers/Header';\nimport Sidebar from './containers/Sidebar';\n\nconst theme = deepMerge(grommet, customTheme);\n\nconst HABITS_STORAGE_KEY = 'habits';\nconst TIME_STORAGE_KEY = 'timeLastVisited';\nconst MOMENT_FORMAT = 'ddd MM-DD-YYYY hh:mm:ss';\n\nfunction App() {\n  const [showSidebar, setShowSidebar] = useState(false);\n  const [habits, setHabits] = useState([]);\n  const [darkMode, setDarkMode] = useState(false);\n\n  // Create listener to add time to localStorage on page unload\n  window.addEventListener('beforeunload', (ev) => {\n    ev.preventDefault();\n    window.localStorage.setItem(\n      TIME_STORAGE_KEY,\n      moment().format(MOMENT_FORMAT)\n    );\n  });\n\n  // Grab habits from localStorage on page load\n  useEffect(() => {\n    const habits = localStorage.getItem(HABITS_STORAGE_KEY);\n    if (habits) {\n      setHabits(JSON.parse(habits));\n    }\n  }, []);\n\n  // Set timeout for habit reset\n  useEffect(() => {\n    const resetHabits = () => {\n      console.log('resetHabits fired');\n      // weekly reset\n      if (moment().day() === 1) {\n        console.log('weekly reset');\n        setHabits((habits) =>\n          habits.map((habit) => ({ ...habit, numTimesChecked: 0 }))\n        );\n      }\n\n      // daily reset\n      console.log('daily reset');\n      setHabits((habits) =>\n        habits.map((habit) => ({ ...habit, checked: false }))\n      );\n    };\n\n    // Calculate number of resets since timeLastVisited\n    const timeLastVisited = moment(\n      window.localStorage.getItem(TIME_STORAGE_KEY),\n      MOMENT_FORMAT\n    );\n\n    const diff = moment().diff(timeLastVisited, 'days');\n    if (diff >= 1) {\n      if (diff >= 7) {\n        console.log('weekly reset diff');\n        setHabits((habits) =>\n          habits.map((habit) => ({ ...habit, numTimesChecked: 0 }))\n        );\n      }\n\n      console.log('daily reset diff');\n      setHabits((habits) =>\n        habits.map((habit) => ({ ...habit, checked: false }))\n      );\n    }\n\n    // Fire resetHabits at midnight\n    setTimeout(\n      resetHabits,\n      moment('24:00:00', 'hh:mm:ss').diff(moment(), 'milliseconds')\n    );\n  }, []);\n\n  // Update localStorage habits everytime useState habits changes\n  useEffect(() => {\n    localStorage.setItem(HABITS_STORAGE_KEY, JSON.stringify(habits));\n  }, [habits]);\n\n  return (\n    <Grommet full theme={theme} themeMode={darkMode ? 'dark' : 'light'}>\n      <Box fill>\n        <Header\n          setShowSidebar={setShowSidebar}\n          showSidebar={showSidebar}\n          darkMode={darkMode}\n          setDarkMode={setDarkMode}\n        />\n        <Box\n          direction=\"row\"\n          flex\n          align=\"start\"\n          overflow={{ horizontal: 'hidden' }}\n          pad=\"medium\"\n        >\n          <Box flex align=\"center\" justify=\"center\" app body>\n            <HabitsContainer habits={habits} setHabits={setHabits} />\n          </Box>\n          <Sidebar showSidebar={showSidebar} setShowSidebar={setShowSidebar} />\n        </Box>\n      </Box>\n    </Grommet>\n  );\n}\n\nexport default App;\n","export const customTheme = {\n  global: {\n    colors: {\n      'header-bg': {\n        light: '#228BE6',\n        dark: '#81218A',\n      },\n      'border-color': {\n        light: 'black',\n        dark: 'white',\n      },\n      'trash-color': {\n        light: 'red',\n        dark: '#D91818',\n      },\n      'add-color': {\n        light: 'blue',\n        dark: '#2521EB',\n      },\n    },\n    font: {\n      family: 'Roboto',\n      size: '18px',\n      height: '20px',\n    },\n  },\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}